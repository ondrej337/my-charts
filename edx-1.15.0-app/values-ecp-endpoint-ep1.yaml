# The commented parameters have default values but these defaults can be overridden when enabled

ecp-endpoint: # type of ECP component. Can be ecp-endpoint, ecp-directory, ecp-broker
  enabled: true # boolean flag which defines whether the component will be deployed or not
  
  instance: # array of ECP endpoint instances - one values file can hold multiple instances
    - name: ep1 # name of kubernetes instance
      image: # section for information about Docker image
        name: entsoe/ecp-endpoint # URL to docker image.
        tag: 4.15.0 # Docker image tag - version or 'latest'
#        pullPolicy: IfNotPresent # Pull policy specifies when the image should be pulled, it is possible to use 'Always' so on every pod (re)start is pulled
      replicaCount: 1 # number of replicas - ECP cluster
      resourcesK8s: # section for CPU and memory specification
        requests: # minimum guaranteed amount of a resource that is reserved for a container
          cpu: 500m # minimum CPU - one CPU = 1000m or 1
          ephemeralStorage: 256Mi # minimum ephemeral storage for application
          memory: 1Gi # minimum memory for container - 1Gi is equal to 1024 Mi
        limits: # maximum amount of a resource to be used by a container. Should be always higher than application can allocate (xmx)
          cpu: 1000m # maximum CPU - two CPUs = 2000m or 2
          memory: 1512Mi # maximum memory for container
      storageData: 1Gi # Storage for embedded database and certificates. If external DB is used, the value can be lower.
      storageLogs: 256Mi # storage for logs
      keepLogsAfterRestart: true # boolean flag - indicates if ECP logs are persisted after pod restart, default value false
      livenessProbe: false # automatic restart if pod is not in health state, default value false
      readinessProbe: true # ECP pod will not started before readiness probe is fulfilled - check of availability of external DB

      service: # section for definition of services exposed within kubernetes environment
#        type: NodePort # Type of the network service - NodePort/LoadBalancer/ClusterIP
        https: # protocol used for accessing GUI - can be http or https
          port: 8443 # port used for exposing HTTP(S) service
#          nodePort: 30443  # port used for exposing HTTP(S) service as for external access. Range - 30000-32767
      ingress: # an object that allows access to Kubernetes services from outside the Kubernetes cluster.
        enabled: false # boolean flag for enable/disable ingress, default value false
#        apiVersion: networking.k8s.io/v1 # Specifies the api version of ingress resource
#        contextPath: / # context path for ingress, default value '/'
#        host: ecp-endpoint.ep1.eccosp # URL on which the ECP Endpoint is exposed. Address needs to be aligned with hosting.
#        tls: # section for TLS definition for HTTPS connection to ingress
#          secretName: tls-secret  # secret where TLS certificate is stored
#        annotations: # ingress annotations section
#          kubernetes.io/ingress.class: nginx  # ingress controller definition
#          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS" # important for remote host tunelling
#          nginx.ingress.kubernetes.io/ssl-passthrough: 'true' # important for remote host tunelling

      # The naming convention for configuration files name and parameters is camelCase instead of 'dot case format'.
      # Mapping of Helm values to ECP configuration file is available in config map ./ecp-endpoint/templates/configMap.yaml
      ecpProperties: # stands for ecp.properties file
        springProfilesActive: ecp-nonha #stands for parameter spring.profiles.active
        dataDirectory: /var/lib/ecp-endpoint # dataDirectory config parameter for storage of persistent data
        ecpKeystoreLocation: /var/lib/ecp-endpoint/keystore.jks # ecp.keystore.location
        ecpKeystorePassword: password # password for the keystore.jks # ecp.keystore.password
        ecpAuthKeystoreLocation: /var/lib/ecp-endpoint/authKeystore.jks #  ecp.authKeystore.location
        ecpAuthKeystorePassword: password # ecp.authKeystore.password

        # Uncomment desired DB configuration section if external DB is used. Change value of parameters as needed.

        # ------ mysql -------
#        springProfilesActive: ecp-ha # high-availibility profile of the application - configuration of external database
#        ecpDBUrl: jdbc:mariadb://1.2.3.4:3306/ep1?characterEncoding=UTF-8&useSSL=false&autoReconnect=true # database connection string
#        ecpDBUsername: ep1 # username of the user of the external database
#        ecpDBPassword: password # password of the user of the external database
#        ecpDBHostname: 1.2.3.4 # required for readiness check, server hostname or IP
#        ecpDBName: ep1 # required for readiness check, external database name
#        springDatasourceValidationQuery: select 1 # database query, that is called once in a while to maintain the db <-> app connection active
#        springDatasourceDriverClassName: org.mariadb.jdbc.Driver # database driver

        # ------ mssql -------
#        springProfilesActive: ecp-ha
#        ecpDBUrl: jdbc:sqlserver://1.2.3.4:1433;databaseName=ep1
#        ecpDBUsername: ep1
#        ecpDBPassword: password
#        ecpDBHostname: 1.2.3.4 # Required for readiness check
#        ecpDBName: ep1 # Required for readiness check
#        springDatasourceValidationQuery: select 1
#        springDatasourceDriverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver

        # ------ postgres -------
#        springProfilesActive: ecp-ha
#        ecpDBUrl: jdbc:postgresql://1.2.3.4:5432/ep1
#        ecpDBUsername: ep1
#        ecpDBPassword: password
#        ecpDBHostname: 1.2.3.4 # Required for readiness check
#        ecpDBName: ep1 # Required for readiness check
#        springDatasourceValidationQuery: select 1
#        springDatasourceDriverClassName: org.postgresql.Driver

        # ------ oracle -------
#        springProfilesActive: ecp-ha
#        ecpDBUrl: jdbc:oracle:thin:@1.2.3.4:1521/ORACLE05PDB
#        ecpDBUsername: ep1
#        ecpDBPassword: password
#        ecpDBHostname: 1.2.3.4 # Required for readiness check
#        ecpDBName: ep1 # Required for readiness check
#        springDatasourceValidationQuery: select 1 from dual
#        springDatasourceDriverClassName: oracle.jdbc.OracleDriver

        internalBrokerHost: eccosp-eccosp-artemis-artemis-eptb1-svc # internalBroker.amqp.host
        internalBrokerAmqpPort: 5672 # internalBroker.amqp.port
        internalBrokerUseAuthentication: true # internalBroker.useAuthentication
        internalBrokerAuthUser: endpoint # internalBroker.auth.user
        internalBrokerAuthPassword: password # internalBroker.auth.password
        internalBrokerKeystoreLocation: ${dataDirectory}/authKeystore.jks # internalBroker.keystore.location
        internalBrokerKeystorePassword: password # internalBroker.keystore.password
        internalBrokerKeystoreAuthAlias: ecp_module_auth # internalBroker.keystore.authAlias
        internalBrokerUrls: amqps://eccosp-eccosp-artemis-artemis-eptb1-svc:5672 # internalBroker.urls

        loggingFileName: /var/log/ecp-endpoint/ecp.log # logging.file.name
        loggingFilePath: /var/log/ecp-endpoint # logging.file.path
        loggingConfig: /etc/ecp-endpoint/ecp-logback.xml # logging.config
        loggingLevelOrgApacheQpid: WARN # logging.level.org.apache.qpid

#        ecpContentStorageRoot: ${dataDirectory}/content # ecp.content.storage.root
#        ecpContentStorageStorageId: 1 # ecp.content.storage.storageId

        springJmxEnabled: false # spring.jmx.enabled
        serverErrorWhiteLabelEnabled: false # server.error.whitelabel.enabled

        ecpDBKeystorePassword: password # ecp.db.keystore.password

        ecpEndpointAmqpApiEnabled: true # ecp.endpoint.amqpApiEnabled
        ecpEndpointAmqpApiSendHandlerEnabled: true # enable AMQP API Send Handler
        sendHandlerBeanName: amqpApiSendHandler # ecp.endpoint.sendHandler[0].beanName
        sendHandlertypeName: "*" # ecp.endpoint.sendHandler[0].typeName

#        ecpNatEnabled: false # NAT is disabled by default - equals to  ecp.natEnabled
#        ecpNatTable: # additional parameter for NAT array. Array values are divided by ' - '
#          - network: internet # ecp.natTable[0].network
#            sourceIp: 1.2.3.4 # ecp.natTable[0].sourceIp
#            sourcePort: 8443 # ecp.natTable[0].sourcePort
#            destinationIp: 5.6.7.8 # ecp.natTable[0].destinationIp
#            destinationPort: 8443 # ecp.natTable[0].destinationPort
#          - network: ATOM # ecp.natTable[1].network
#            sourceIp: 1.1.1.1 # ecp.natTable[1].sourceIp
#            sourcePort: 5671 # ecp.natTable[1].sourcePort
#            destinationIp: 2.2.2.2 # ecp.natTable[1].destinationIp
#            destinationPort: 5671 # ecp.natTable[1].destinationPort

#        ecpSecurityProxyEnabled: false # ecp.security.proxy.enabled
#        ecpSecurityProxyHost: socks-host # ecp.security.proxy.host
#        ecpSecurityProxyProxyPort: 1081 # ecp.security.proxy.port
#        ecpSecurityProxyNonProxyHosts: 127.0.0.1,0.0.0.0 # ecp.security.proxy.nonProxyHosts
#        ecpSecurityProxyUsername: sockssuser # ecp.security.proxy.username
#        ecpSecurityProxyPassword: sockspassword # ecp.security.proxy.password

#        jasyptEncryptorAlgorithm: PBEWithHMACSHA512AndAES_256 # jasypt.encryptor.algorithm
#        prometheusMonitoringEnabled: false # management.endpoints.web.exposure.include=info,health,readiness,prometheus

#        ecpMaxRequestSize: 2097152 # ecp.maxRequestSize

#        ecpHealthExclude: connectedBrokers,waitingToDeliver,waitingToReceive,isReloading,endpointStatus,certificatesStatus,invalidMessagePath,withoutValidMessagePath,synchronizationStatus,internalBrokerConnected

#        ecpHealthThresholdConnectedBrokers: # ecp.healthThreshold.connectedBrokers
#        ecpHealthThresholdWaitingToDeliver: # ecp.healthThreshold.waitingToDeliver
#        ecpHealthThresholdWaitingToReceive: # ecp.healthThreshold.waitingToReceive
#        ecpHealthThresholdInvalidMessagePath: # ecp.healthThreshold.invalidMessagePath

        ## Spring Release 2024
        ecpCsrfSecret: P9CkNis9r5Pn00RFZwN9oZgi # ecp.csrf.secret
#        internalBrokerQueuePrefix: ecp-endpoint #internalBroker.queuePrefix
#        messagingDelayHours: 480 # ecp.automaticUpdate.messagingDelayHours
#        brokerConnectionDelayHours: 480 # ecp.authKeystore.brokerConnectionDelayHours
        ## Fall Release 2024
#        internalBrokerBAQueuePrefix: # internalBroker.baQueuePrefix
        # DBCP2 connection pool configuration
#        springDatasourceDbcp2MaxTotal: 8 # spring.datasource.dbcp2.maxTotal
#        springDatasourceDbcp2MaxIdle: 8 # spring.datasource.dbcp2.maxIdle
#        springDatasourceDbcp2TimeBetweenEvictionRunsMillis: 1800000 # spring.datasource.dbcp2.timeBetweenEvictionRunsMillis
#        springDatasourceDbcp2MinEvictableIdleTimeMillis: 60000 # spring.datasource.dbcp2.minEvictableIdleTimeMillis
#        springDatasourceDbcp2NumTestsPerEvictionRun: 3 # spring.datasource.dbcp2.numTestsPerEvictionRun
#        springDatasourceDbcp2TestOnBorrow: true # spring.datasource.dbcp2.testOnBorrow
#        springDatasourceDbcp2ValidationQuery: values 1 # spring.datasource.dbcp2.validationQuery
#        springDatasourceDbcp2ValidationQueryTimeout: -1 # spring.datasource.dbcp2.validationQueryTimeout
#        springDatasourceDbcp2PoolPreparedStatements: false # spring.datasource.dbcp2.poolPreparedStatements

      envConf: # stands for env.conf file
        resourcesJvm: # memory allocation for ECP component
          xms: 128M # lower bound of java heap memory size
          xmx: 1G # upper bound of java heap memory size
#        ecpLogFullStackTrace: false # ecp.logFullStackTrace

      ecpUsersProperties: # stands for ecp-users.properties
        ecpEndpointUsers: # array of users
          - login: admin # ecp.endpoint.users[0].login
            password: password # ecp.endpoint.users[0].password
            role: admin # ecp.endpoint.users[0].role
          - login: tester # ecp.endpoint.users[1].login
            password: passwordtester # ecp.endpoint.users[1].password
            role: user # ecp.endpoint.users[1].login

#      ecpPasswordProperties: # ecp-password.properties
#        encryptionPassword: encryptionPassword # encryption password for Jasypt

#      jmxRemoteProperties: # jmxremote.properties
#        comSunManagementJmxRemote: true # com.sun.management.jmxremote
#        comSunManagementJmxRemotePort: 2099 # com.sun.management.jmxremote.port
#        comSunManagementJmxRemoteRmiPort: 2098 # com.sun.management.jmxremote.rmi.port
#        comSunManagementJmxRemotePasswordFile: /etc/ecp-endpoint/jmxremote.password # com.sun.management.jmxremote.password.file
#        comSunManagementJmxRemoteAccessFile: /etc/ecp-endpoint/jmxremote.access # com.sun.management.jmxremote.access.file
#        comSunManagementJmxRemoteSsl: true # com.sun.management.jmxremote.ssl
#        comSunManagementJmxRegistrySsl: true # com.sun.management.jmxremote.registry.ssl
#        comSunManagementJmxRemoteSslConfigFile: /etc/ecp-endpoint/jmxremote.ssl # com.sun.management.jmxremote.ssl.config.file
#        comSunManagementJmxRemoteAuthenticate: true # com.sun.management.jmxremote.authenticate

#      jmxRemoteSsl: # jmxremote.ssl
#        javaxNetSslKeystore: /path/to/keystore.jks # javax.net.ssl.keyStore
#        javaxNetSslKeystorePassword: keystore_password # javax.net.ssl.keyStorePassword
#        javaxNetSslTrustStore: /path/to/truststore.jks # javax.net.ssl.trustStore
#        javaxNetSslTrustStorePassword: truststore_password # javax.net.ssl.trustStorePassword

#      jmxRemotePassword: # jmxremote.password
#        jmxRemoteUsers: # array of JMX users
#          - login: jmxuser # login for the first JMX user
#            password: jmxpassword # password for the first JMX user
#            access: readonly # access role for the first JMX user
#          - login: jmxadmin # login for second JMX user
#            password: jmxadminpassword # password for second JMX user
#            access: readwrite # access role for the second JMX user

      volumeMounts: # volume mounts - can be used for mapping config files or storages
        - name: config # name of volume mounts for config
          subPath: bootstrap.xml # name of configuration file
          mountPath: /etc/ecp-endpoint/jms/ssl-jks/bootstrap.xml # path where config file will be mounted

      configMap: # config maps array
        - subPath: bootstrap.xml # name of config file/volume mount
          content: |- # content is shifted by two spaces
           <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
           <!--
             ~ Licensed to the Apache Software Foundation (ASF) under one or more
             ~ contributor license agreements. See the NOTICE file distributed with
             ~ this work for additional information regarding copyright ownership.
             ~ The ASF licenses this file to You under the Apache License, Version 2.0
             ~ (the "License"); you may not use this file except in compliance with
             ~ the License. You may obtain a copy of the License at
             ~
             ~     http://www.apache.org/licenses/LICENSE-2.0
             ~
             ~ Unless required by applicable law or agreed to in writing, software
             ~ distributed under the License is distributed on an "AS IS" BASIS,
             ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             ~ See the License for the specific language governing permissions and
             ~ limitations under the License.
             -->

           <broker xmlns="http://activemq.apache.org/schema">

              <jaas-security domain="activemq"/>

              <!-- artemis.URI.instance is parsed from artemis.instance by the CLI startup.
                   This is to avoid situations where you could have spaces or special characters on this URI -->
              <server configuration="file:/opt/eccosp-artemis/etc/broker.xml"/>

              <!-- The web server is only bound to localhost by default -->
              <web path="web" rootRedirectLocation="console">
                  <binding name="artemis" uri="http://localhost:8161">
                      <app name="branding" url="activemq-branding" war="activemq-branding.war"/>
                      <app name="plugin" url="artemis-plugin" war="artemis-plugin.war"/>
                      <app name="console" url="console" war="console.war"/>
                      <app url="metrics" war="metrics.war"/>
                  </binding>
              </web>
           </broker>

#  See ECP Kubernetes Guide, chapter ECP Endpoint Shared Folder configuration
#      volumeClaimTemplates:
#        - metadata:
#            name: fssf # volume name
#          spec:
#            accessModes: [ "ReadWriteMany" ] # storage of type ReadWriteMany
#            storageClassName: nfs-storage # name of storage class - needs to be provided by Kubernetes administrator
#            resources:
#              requests:
#                storage: 512Mi # request for shared storage size

# global config
global: # global config
  storage: # storage section
    class: standard # storage class – needs to be provided by Kubernetes cluster administrator
  imagePullSecrets: # secrets which hold information about login to docker repository
    - name: regcred # name of secret – name is defined by Kubernetes cluster administrator