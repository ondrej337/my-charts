{{- range $i, $instance := .Values.instance }}
{{- if or $instance.enabled (not (hasKey $instance "enabled")) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{$.Release.Namespace}}-{{ $.Chart.Name }}-{{$instance.name}}-cm
  labels:
    backup.component.name: {{ $.Release.Name }}
data:
  broker.properties: |-
    # Broker registration data
    ecp.broker.contactPerson = {{ $instance.brokerProperties.ecpBrokerContactPerson }}
    ecp.broker.contactEmail = {{ $instance.brokerProperties.ecpBrokerContactEmail }}
    ecp.broker.contactPhone = {{ $instance.brokerProperties.ecpBrokerContactPhone }}
    ecp.broker.organization = {{ $instance.brokerProperties.ecpBrokerOrganization }}

    # Broker URL with pattern <protocol>://<host>:<port>
    # Broker protocol is typically amqps
    ecp.broker.urls = {{ $instance.brokerProperties.ecpBrokerUrls }}
    ecp.broker.networks = {{ $instance.brokerProperties.ecpBrokerNetworks | default "DefaultNetwork" }}
    # Value is set by registration tool, do not modify
    ecp.broker.registrationDirectoryId = {{ $instance.brokerProperties.ecpBrokerregistrationDirectoryId }}
    # ECP Broker component code
    ecp.broker.code = {{ $instance.brokerProperties.ecpBrokerCode }}

    # Broker settings
    # Location of broker.properties file
    ecp.broker.configurationFile = /opt/ecp-broker/config/broker.properties
    ecp.broker.filter.components = {{ $instance.brokerProperties.ecpBrokerFilterComponents | default "*" }}
    ecp.broker.filter.types = {{ $instance.brokerProperties.ecpBrokerFilterTypes | default "*" }}
    # Location of keystore with registration certificates. This keystore is provided with installation package.
    # Registration keystore can be also obtained from component directory.
    ecp.keystore.location = {{ $instance.brokerProperties.ecpKeystoreLocation | default "/opt/ecp-broker/config/registrationKeystore.jks" }}
    ecp.keystore.password = {{ $instance.brokerProperties.ecpKeystorePassword | default "password" }}
    # Location of keystore with authentication certificates.
    #This keystore is created by broker registration tool after successful registration.
    ecp.authKeystore.location = {{ $instance.brokerProperties.ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }}
    ecp.authKeystore.password = {{ $instance.brokerProperties.ecpAuthKeystorePassword | default "password" }}

    # Component code of home component directory
    ecp.directory.client.synchronization.homeComponentDirectoryPrimaryCode = {{ $instance.brokerProperties.ecpDirectoryClientSynchronizationHomeComponentDirectoryPrimaryCode }}
    # Component directory synchronization interval (CRON expression)
    ecp.directory.client.synchronization.directorySynchronizationInterval = {{ $instance.brokerProperties.ecpDirectoryClientSynchronizationDirectorySynchronizationInterval | default "0 */5 * * * *" }}
    #URL of home component directory
    ecp.directory.client.synchronization.homeComponentDirectoryPrimaryUrl = {{ $instance.brokerProperties.ecpDirectoryClientSynchronizationHomeComponentDirectoryPrimaryUrl }}
    # Location of component directory storage directory
    ecp.directory.client.root = {{ $instance.brokerProperties.ecpDirectoryClientRoot | default "/opt/ecp-broker/cd" }}

    {{- if $instance.brokerProperties.ecpNatEnabled }}
    # NAT configuration
    ecp.natEnabled={{$instance.brokerProperties.ecpNatEnabled}}
   {{- range $j, $item := $instance.brokerProperties.ecpNatTable }}
    ecp.natTable[{{$j}}].network={{.network}}
    ecp.natTable[{{$j}}].sourceIp={{.sourceIp}}
    ecp.natTable[{{$j}}].sourcePort={{.sourcePort}}
    ecp.natTable[{{$j}}].destinationIp={{.destinationIp}}
    ecp.natTable[{{$j}}].destinationPort={{.destinationPort}}
    {{- end}}
    {{- end}}

    {{- if $instance.brokerProperties.ecpSecurityProxyEnabled}}
    # SOCKS proxy configuration
    ecp.security.proxy.enabled={{ $instance.brokerProperties.ecpSecurityProxyEnabled }}
    ecp.security.proxy.host={{ $instance.brokerProperties.ecpSecurityProxyHost }}
    ecp.security.proxy.port={{ $instance.brokerProperties.ecpSecurityProxyProxyPort | default "1080" }}
    {{ if $instance.brokerProperties.ecpSecurityProxyNonProxyHosts }}{{print "ecp.security.proxy.nonProxyHosts=" $instance.brokerProperties.ecpSecurityProxyNonProxyHosts}}{{ else }}#ecp.security.proxy.nonProxyHosts={{ end }}
    {{ if $instance.brokerProperties.ecpSecurityProxyUsername }}{{print "ecp.security.proxy.username=" $instance.brokerProperties.ecpSecurityProxyUsername}}{{ else }}#ecp.security.proxy.username={{ end }}
    {{ if $instance.brokerProperties.ecpSecurityProxyPassword }}{{print "ecp.security.proxy.password=" $instance.brokerProperties.ecpSecurityProxyPassword}}{{ else }}#ecp.security.proxy.password={{ end }}
    {{- end}}

  artemis.profile: |-
    # Licensed to the Apache Software Foundation (ASF) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The ASF licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

    ARTEMIS_HOME='/opt/ecp-broker/artemis'
    ARTEMIS_INSTANCE='/opt/ecp-broker/broker'
    ARTEMIS_DATA_DIR='/opt/ecp-broker/broker/data'
    ARTEMIS_ETC_DIR='/opt/ecp-broker/broker/etc'
    ARTEMIS_OOME_DUMP='/opt/ecp-broker/broker/log/oom_dump.hprof'

    # The logging config will need an URI
    # this will be encoded in case you use spaces or special characters
    # on your directory structure
    ARTEMIS_INSTANCE_URI='file:/opt/ecp-broker/broker/'
    ARTEMIS_INSTANCE_ETC_URI='file:/opt/ecp-broker/broker/etc/'

    # Cluster Properties: Used to pass arguments to ActiveMQ Artemis which can be referenced in broker.xml
    #ARTEMIS_CLUSTER_PROPS="-Dactivemq.remoting.default.port=61617 -Dactivemq.remoting.amqp.port=5673 -Dactivemq.remoting.stomp.port=61614 -Dactivemq.remoting.hornetq.port=5446"

    # Hawtio Properties
    # HAWTIO_ROLE define the user role or roles required to be able to login to the console. Multiple roles to allow can
    # be separated by a comma. Set to '*' or an empty value to disable role checking when Hawtio authenticates a user.
    HAWTIO_ROLE='amq'

    # Java Opts
    if [ -z "$JAVA_ARGS" ]; then
        JAVA_ARGS="-XX:AutoBoxCacheMax=20000 -XX:+PrintClassHistogram -XX:+UseG1GC -XX:+UseStringDeduplication -Xms{{- (($instance.env).resourcesJvm).xms | default "512M" }} -Xmx{{- (($instance.env).resourcesJvm).xmx | default "4G" }} -Dhawtio.disableProxy=true -Dhawtio.realm=activemq -Dhawtio.offline=true -Dhawtio.rolePrincipalClasses=org.apache.activemq.artemis.spi.core.security.jaas.RolePrincipal -Dhawtio.http.strictTransportSecurity=max-age=31536000;includeSubDomains;preload -Djolokia.policyLocation=${ARTEMIS_INSTANCE_ETC_URI}jolokia-access.xml -Dlog4j2.disableJmx=true "
    fi

    # Uncomment to enable logging for Safepoint JVM pauses
    #
    # In addition to the traditional GC logs you could enable some JVM flags to know any meaningful and "hidden" pause
    # that could affect the latencies of the services delivered by the broker, including those that are not reported by
    # the classic GC logs and dependent by JVM background work (eg method deoptimizations, lock unbiasing, JNI, counted
    # loops and obviously GC activity).
    #
    # Replace "all_pauses.log" with the file name you want to log to.
    # JAVA_ARGS="$JAVA_ARGS -XX:+PrintSafepointStatistics -XX:PrintSafepointStatisticsCount=1 -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime -XX:+LogVMOutput -XX:LogFile=all_pauses.log"

    # Uncomment to enable the dumping of the Java heap when a java.lang.OutOfMemoryError exception is thrown
    # JAVA_ARGS="$JAVA_ARGS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ARTEMIS_OOME_DUMP}"

    # Only enable debug options for the 'run' command
    if [ "$1" = "run" ]; then :
        # Uncomment to enable remote debugging
        # DEBUG_ARGS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"

        # Uncomment for async profiler
        # DEBUG_ARGS="-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints"
    fi
  broker.xml: |-
    <?xml version='1.0'?>
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <configuration xmlns="urn:activemq"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xi="http://www.w3.org/2001/XInclude"
                   xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

       <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq:core ">

          <name>{{- (($instance.brokerXml).default).artemisName | default (printf "%s-%s" "ECP Broker" $instance.name )}}</name>

          <persistence-enabled>{{- (($instance.brokerXml).journal).persistenceEnabled | default true }}</persistence-enabled>

          <!-- It is recommended to keep this value as 1, maximizing the number of records stored about redeliveries.
               However if you must preserve state of individual redeliveries, you may increase this value or set it to -1 (infinite). -->
          <max-redelivery-records>{{- (($instance.brokerXml).journal).maxRedeliveryRecords | default 1 }}</max-redelivery-records>

          <!-- this could be ASYNCIO, MAPPED, NIO-->
          <journal-type>{{- (($instance.brokerXml).journal).type | default "ASYNCIO" }}</journal-type>

          <!-- HA - For HA setup these directories need to point to the same storage between all the nodes -->
          <paging-directory>{{- (($instance.brokerXml).journal).pagingDirectory | default "data/paging" }}</paging-directory>
          <bindings-directory>{{- (($instance.brokerXml).journal).bindingsDirectory | default "data/bindings" }}</bindings-directory>
          <journal-directory>{{- (($instance.brokerXml).journal).journalDirectory | default "data/journal" }}</journal-directory>
          <large-messages-directory>{{- (($instance.brokerXml).journal).largeMessagesDirectory | default "data/large-messages" }}</large-messages-directory>

          <journal-datasync>{{- (($instance.brokerXml).journal).dataSync | default true }}</journal-datasync>
          <journal-min-files>{{- (($instance.brokerXml).journal).minFiles | default 2 }}</journal-min-files>
          <journal-pool-files>{{- (($instance.brokerXml).journal).poolFiles | default 10 }}</journal-pool-files>
          <journal-device-block-size>{{- (($instance.brokerXml).journal).deviceBlockSize | default 4096 }}</journal-device-block-size>
          <journal-file-size>{{- (($instance.brokerXml).journal).fileSize | default "10M" }}</journal-file-size>

          <!--
           This value was determined through a calculation.
           Your system could perform 50 writes per millisecond
           on the current journal configuration.
           That translates as a sync write every 20000 nanoseconds.

           Note: If you specify 0 the system will perform writes directly to the disk.
                 We recommend this to be 0 if you are using journalType=MAPPED and journal-datasync=false.
          -->
          <journal-buffer-timeout>{{- (($instance.brokerXml).journal).bufferTimeout | default 20000 }}</journal-buffer-timeout>

          <!-- When using ASYNCIO, this will determine the writing queue depth for libaio.-->
          <journal-max-io>{{- (($instance.brokerXml).journal).maxIO | default 4096 }}</journal-max-io>
          <!-- how often we are looking for how many bytes are being used on the disk in ms -->
          <disk-scan-period>{{- (($instance.brokerXml).default).diskScanPeriod | default 5000 }}</disk-scan-period>

          <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
               that won't support flow control. -->
          <max-disk-usage>{{- (($instance.brokerXml).default).diskMaxUsage | default 90 }}</max-disk-usage>

          <!-- should the broker detect dead locks and other issues -->
          <critical-analyzer>{{- (($instance.brokerXml).criticalAnalyzer).enabled | default true }}</critical-analyzer>
          <critical-analyzer-timeout>{{- (($instance.brokerXml).criticalAnalyzer).timeout | default 120000 }}</critical-analyzer-timeout>
          <critical-analyzer-check-period>{{- (($instance.brokerXml).criticalAnalyzer).checkPeriod | default 60000 }}</critical-analyzer-check-period>
          <critical-analyzer-policy>{{- (($instance.brokerXml).criticalAnalyzer).policy | default "HALT" }}</critical-analyzer-policy>

          <page-sync-timeout>{{- (($instance.brokerXml).default).pageSyncTimeout | default 84000 }}</page-sync-timeout>

          <!-- how often (in ms) to check the configuration file for modifications -->
          <configuration-file-refresh-period>{{- (($instance.brokerXml).default).configurationFileRefreshPeriod | default -1 }}</configuration-file-refresh-period>

          <!-- the system will enter into page mode once you hit this limit. This is an estimate in bytes of how much the messages are using in memory
          The system will use half of the available memory (-Xmx) by default for the global-max-size.
          You may specify a different value here if you need to customize it to your needs.-->
          <global-max-size>{{- (($instance.brokerXml).default).globalMaxSize | default "800M" }}</global-max-size>

          <!-- the maximum number of messages accepted before entering full address mode.
               if global-max-size is specified the full address mode will be specified by whatever hits it first. -->
          <global-max-messages>{{- (($instance.brokerXml).default).globalMaxMessages | default -1 }}</global-max-messages>

          <acceptors>
             <!-- AMQPS Acceptor -->
             <acceptor name="amqps-broker">
                tcp://{{- (($instance.brokerXml).acceptor).ip | default "0.0.0.0" }}:{{- (($instance.brokerXml).acceptor).port | default 5671 }}?sslEnabled={{- (($instance.brokerXml).acceptor).sslEnabled | default true }};needClientAuth={{- (($instance.brokerXml).acceptor).needClientAuth | default true }};keyStorePath={{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }};keyStorePassword={{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }};trustStorePath={{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }};trustStorePassword={{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }};protocols={{- (($instance.brokerXml).acceptor).protocols | default "AMQP" }};enabledProtocols={{- (($instance.brokerXml).acceptor).enabledProtocols | default "TLSv1.3" }};transport.enabledCipherSuites={{- (($instance.brokerXml).acceptor).enabledCipherSuites | default "TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256" }}{{- if (($instance.brokerXml).acceptor).properties}}{{- range $j, $item := (($instance.brokerXml).acceptor).properties }};{{- .parameterName }}={{- .value }}{{- end }}{{- end}}
             </acceptor>
          </acceptors>
          <security-settings>
             <security-setting match="#">
                <permission type="createNonDurableQueue" roles="amq"/>
                <permission type="deleteNonDurableQueue" roles="amq"/>
                <permission type="createDurableQueue" roles="amq"/>
                <permission type="deleteDurableQueue" roles="amq"/>
                <permission type="createAddress" roles="amq"/>
                <permission type="deleteAddress" roles="amq"/>
                <permission type="consume" roles="amq"/>
                <permission type="browse" roles="amq"/>
                <permission type="send" roles="amq"/>
                <!-- we need this otherwise ./artemis data imp wouldn't work -->
                <permission type="manage" roles="amq"/>
             </security-setting>
          </security-settings>

          <address-settings>
          {{- if (($instance.brokerXml).addressSettings).defaultConfigurationEnabled }}
             <!--default for catch all-->
             <address-setting match="#">
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- if max-size-bytes and max-size-messages were both enabled, the system will enter into paging
                     based on the first attribute to hits the maximum value -->
                <max-size-bytes>100M</max-size-bytes>

                <!-- limit for the address in messages, -1 means unlimited -->
                <max-size-messages>-1</max-size-messages>

                <!-- the size of each file on paging. Notice we keep files in memory while they are in use.
                     Lower this setting if you have too many queues in memory. -->
                <page-size-bytes>10M</page-size-bytes>

                <!-- limit how much memory is read from paging into the Queue. -->
                <max-read-page-bytes>20M</max-read-page-bytes>

                <message-counter-history-day-limit>-1</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-delete-queues>false</auto-delete-queues>
                <auto-delete-addresses>false</auto-delete-addresses>
             </address-setting>
             {{- end}}
          {{- range $_, $item := $instance.brokerXml.addressSettings.match }}
            {{- range $k, $v := . }}
             <address-setting match="{{ $k }}">
              {{- range $s, $path := $v }}
               <{{($path.parameterName)}}>{{($path.value)}}</{{ ($path.parameterName) }}>
              {{- end }}
            {{- end }}
             </address-setting>
          {{- end }}
          </address-settings>
          <addresses>
             <address name="DLQ">
                <anycast>
                   <queue name="DLQ" />
                </anycast>
             </address>
             <address name="ExpiryQueue">
                <anycast>
                   <queue name="ExpiryQueue" />
                </anycast>
             </address>
          </addresses>

        {{- if ($instance.prometheusEnabled) }}
          <metrics>
             <plugin class-name="eu.entsoe.ecp.artemis.plugin.prometheus.EcpPrometheusMetricsPlugin">
               <property key="ecpBrokerPropertiesLocation" value="{{- (($instance.brokerXml).default).ecpBrokerPropertiesLocation | default "/opt/ecp-broker/config/broker.properties" }}" />
             </plugin>
          </metrics>
        {{- end }}

          <broker-plugins>
             <broker-plugin class-name="eu.entsoe.ecp.artemis.plugin.auth.EcpBasePlugin">
                <property key="ecpBrokerPropertiesLocation" value="{{- (($instance.brokerXml).default).ecpBrokerPropertiesLocation | default "/opt/ecp-broker/config/broker.properties" }}" />
                <property key="ecpBrokerBeanConfigLocation" value="{{- (($instance.brokerXml).default).beanConfigLocation | default "/opt/ecp-broker/broker/etc/ecp-config.xml" }}" />
                <property key="ecpComponentType" value="{{- (($instance.brokerXml).default).componentType | default "ECP Broker" }}" />
                {{- if (($instance.brokerXml).default).dlq }}
                <property key="dlq" value="{{ (($instance.brokerXml).default).dlq }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).ecpCacheDisabled }}
                <property key="ecpCacheDisabled" value="{{ (($instance.brokerXml).default).ecpCacheDisabled }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).ecpCacheReloadInterval }}
                <property key="ecpCacheReloadInterval" value="{{ (($instance.brokerXml).default).ecpCacheReloadInterval }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).clusterUser }}
                <property key="clusterUser" value="{{ (($instance.brokerXml).default).clusterUser }}" />
                {{- end }}
             </broker-plugin>
          </broker-plugins>
       </core>
    </configuration>
  broker-master.xml: |-
    <?xml version='1.0'?>
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <configuration xmlns="urn:activemq"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xi="http://www.w3.org/2001/XInclude"
                   xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

       <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq:core ">

          <name>{{- (($instance.brokerXml).default).artemisName | default (printf "%s-%s" "ECP Broker" $instance.name )}}</name>

          <persistence-enabled>{{- (($instance.brokerXml).journal).persistenceEnabled | default true }}</persistence-enabled>

          <!-- It is recommended to keep this value as 1, maximizing the number of records stored about redeliveries.
               However if you must preserve state of individual redeliveries, you may increase this value or set it to -1 (infinite). -->
          <max-redelivery-records>{{- (($instance.brokerXml).journal).maxRedeliveryRecords | default 1 }}</max-redelivery-records>

          <!-- this could be ASYNCIO, MAPPED, NIO-->
          <journal-type>{{- (($instance.brokerXml).journal).type | default "ASYNCIO" }}</journal-type>

          <!-- HA - For HA setup these directories need to point to the same storage between all the nodes -->
          <paging-directory>{{- (($instance.brokerXml).journal).pagingDirectory | default "data/paging" }}</paging-directory>
          <bindings-directory>{{- (($instance.brokerXml).journal).bindingsDirectory | default "data/bindings" }}</bindings-directory>
          <journal-directory>{{- (($instance.brokerXml).journal).journalDirectory | default "data/journal" }}</journal-directory>
          <large-messages-directory>{{- (($instance.brokerXml).journal).largeMessagesDirectory | default "data/large-messages" }}</large-messages-directory>

          <journal-datasync>{{- (($instance.brokerXml).journal).dataSync | default true }}</journal-datasync>
          <journal-min-files>{{- (($instance.brokerXml).journal).minFiles | default 2 }}</journal-min-files>
          <journal-pool-files>{{- (($instance.brokerXml).journal).poolFiles | default 10 }}</journal-pool-files>
          <journal-device-block-size>{{- (($instance.brokerXml).journal).deviceBlockSize | default 4096 }}</journal-device-block-size>
          <journal-file-size>{{- (($instance.brokerXml).journal).fileSize | default "10M" }}</journal-file-size>

          <!--
           This value was determined through a calculation.
           Your system could perform 50 writes per millisecond
           on the current journal configuration.
           That translates as a sync write every 20000 nanoseconds.

           Note: If you specify 0 the system will perform writes directly to the disk.
                 We recommend this to be 0 if you are using journalType=MAPPED and journal-datasync=false.
          -->
          <journal-buffer-timeout>{{- (($instance.brokerXml).journal).bufferTimeout | default 20000 }}</journal-buffer-timeout>

          <!-- When using ASYNCIO, this will determine the writing queue depth for libaio.-->
          <journal-max-io>{{- (($instance.brokerXml).journal).maxIO | default 4096 }}</journal-max-io>

          <!-- HA Connectors used to be announced through cluster connections and notifications -->
          <connectors>
            <connector name="MASTER">tcp://MASTER.{{$.Release.Namespace}}-{{ $.Chart.Name }}-{{$instance.name}}-headless-svc.{{$.Release.Namespace}}.svc.cluster.local:{{- ((($instance.brokerXml).highAvailability).acceptor).port | default 61616 }}</connector>
          {{- range untilStep 1 (int $instance.replicaCount) 1 }}
            <connector name="SLAVE{{ . }}">tcp://SLAVE{{ . }}.{{$.Release.Namespace}}-{{ $.Chart.Name }}-{{$instance.name}}-headless-svc.{{$.Release.Namespace}}.svc.cluster.local:{{- ((($instance.brokerXml).highAvailability).acceptor).port | default 61616 }}</connector>
          {{- end }}
          </connectors>
          <!-- how often we are looking for how many bytes are being used on the disk in ms -->
          <disk-scan-period>{{- (($instance.brokerXml).default).diskScanPeriod | default 5000 }}</disk-scan-period>

          <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
               that won't support flow control. -->
          <max-disk-usage>{{- (($instance.brokerXml).default).diskMaxUsage | default 90 }}</max-disk-usage>

          <!-- should the broker detect dead locks and other issues -->
          <critical-analyzer>{{- (($instance.brokerXml).criticalAnalyzer).enabled | default true }}</critical-analyzer>
          <critical-analyzer-timeout>{{- (($instance.brokerXml).criticalAnalyzer).timeout | default 120000 }}</critical-analyzer-timeout>
          <critical-analyzer-check-period>{{- (($instance.brokerXml).criticalAnalyzer).checkPeriod | default 60000 }}</critical-analyzer-check-period>
          <critical-analyzer-policy>{{- (($instance.brokerXml).criticalAnalyzer).policy | default "HALT" }}</critical-analyzer-policy>

          <page-sync-timeout>{{- (($instance.brokerXml).default).pageSyncTimeout | default 84000 }}</page-sync-timeout>

          <!-- how often (in ms) to check the configuration file for modifications -->
          <configuration-file-refresh-period>{{- (($instance.brokerXml).default).configurationFileRefreshPeriod | default -1 }}</configuration-file-refresh-period>

          <!-- the system will enter into page mode once you hit this limit. This is an estimate in bytes of how much the messages are using in memory
          The system will use half of the available memory (-Xmx) by default for the global-max-size.
          You may specify a different value here if you need to customize it to your needs.-->
          <global-max-size>{{- (($instance.brokerXml).default).globalMaxSize | default "800M" }}</global-max-size>

          <!-- the maximum number of messages accepted before entering full address mode.
               if global-max-size is specified the full address mode will be specified by whatever hits it first. -->
          <global-max-messages>{{- (($instance.brokerXml).default).globalMaxMessages | default -1 }}</global-max-messages>

          <acceptors>
             <!-- AMQPS Acceptor -->
             <acceptor name="amqps-broker">
                tcp://{{- (($instance.brokerXml).acceptor).ip | default "0.0.0.0" }}:{{- (($instance.brokerXml).acceptor).port | default 5671 }}?sslEnabled={{- (($instance.brokerXml).acceptor).sslEnabled | default true }};needClientAuth={{- (($instance.brokerXml).acceptor).needClientAuth | default true }};keyStorePath={{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }};keyStorePassword={{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }};trustStorePath={{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }};trustStorePassword={{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }};protocols={{- (($instance.brokerXml).acceptor).protocols | default "AMQP" }};enabledProtocols={{- (($instance.brokerXml).acceptor).enabledProtocols | default "TLSv1.3" }};transport.enabledCipherSuites={{- (($instance.brokerXml).acceptor).enabledCipherSuites | default "TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256" }}{{- if (($instance.brokerXml).acceptor).properties}}{{- range $j, $item := (($instance.brokerXml).acceptor).properties }};{{- .parameterName }}={{- .value }}{{- end }}{{- end}}
             </acceptor>
             <!-- HA - Acceptor for the cluster communication in HA setup -->
             <acceptor name="artemis">tcp://{{- ((($instance.brokerXml).highAvailability).acceptor).ip | default "0.0.0.0" }}:{{- ((($instance.brokerXml).highAvailability).acceptor).port | default 61616 }}?tcpSendBufferSize={{- ((($instance.brokerXml).highAvailability).acceptor).tcpSendBufferSize | default 1048576 }};tcpReceiveBufferSize={{- ((($instance.brokerXml).highAvailability).acceptor).tcpReceiveBufferSize | default 1048576 }};protocols={{- ((($instance.brokerXml).highAvailability).acceptor).protocols | default "CORE" }};useEpoll={{- ((($instance.brokerXml).highAvailability).acceptor).useEpoll | default true }}{{- if ((($instance.brokerXml).highAvailability).acceptor).properties }}{{- range $j, $item := ((($instance.brokerXml).highAvailability).acceptor).properties }};{{- .parameterName }}={{- .value }}{{- end }}{{- end}}</acceptor>
          </acceptors>
          <!-- HA - Cluster connection and policy settings -->
                <cluster-user>{{- (($instance.brokerXml).highAvailability).user | default "broker-ha" }}</cluster-user>
                <cluster-password>{{- (($instance.brokerXml).highAvailability).password | default "Uu:dz9bkmw+45?TqMd?f" }}</cluster-password>

                <cluster-connections>
                    <cluster-connection name="{{- (($instance.brokerXml).highAvailability).connectionName | default "ha-cluster" }}">
                        <connector-ref>MASTER</connector-ref>
                        <static-connectors>
                        {{- range untilStep 1 (int $instance.replicaCount) 1 }}
                            <connector-ref>SLAVE{{ . }}</connector-ref>
                        {{- end }}
                        </static-connectors>
                    </cluster-connection>
                </cluster-connections>

                <ha-policy>
                   <shared-store>
                        <master>
                            <failover-on-shutdown>true</failover-on-shutdown>
                        </master>
                    </shared-store>
                </ha-policy>
          <security-settings>
             <security-setting match="#">
                <permission type="createNonDurableQueue" roles="amq"/>
                <permission type="deleteNonDurableQueue" roles="amq"/>
                <permission type="createDurableQueue" roles="amq"/>
                <permission type="deleteDurableQueue" roles="amq"/>
                <permission type="createAddress" roles="amq"/>
                <permission type="deleteAddress" roles="amq"/>
                <permission type="consume" roles="amq"/>
                <permission type="browse" roles="amq"/>
                <permission type="send" roles="amq"/>
                <!-- we need this otherwise ./artemis data imp wouldn't work -->
                <permission type="manage" roles="amq"/>
             </security-setting>
          </security-settings>

          <address-settings>
          {{- if (($instance.brokerXml).addressSettings).defaultConfigurationEnabled }}
             <!--default for catch all-->
             <address-setting match="#">
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- if max-size-bytes and max-size-messages were both enabled, the system will enter into paging
                     based on the first attribute to hits the maximum value -->
                <max-size-bytes>100M</max-size-bytes>

                <!-- limit for the address in messages, -1 means unlimited -->
                <max-size-messages>-1</max-size-messages>

                <!-- the size of each file on paging. Notice we keep files in memory while they are in use.
                     Lower this setting if you have too many queues in memory. -->
                <page-size-bytes>10M</page-size-bytes>

                <!-- limit how much memory is read from paging into the Queue. -->
                <max-read-page-bytes>20M</max-read-page-bytes>

                <message-counter-history-day-limit>-1</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-delete-queues>false</auto-delete-queues>
                <auto-delete-addresses>false</auto-delete-addresses>
             </address-setting>
             {{- end}}
          {{- range $_, $item := $instance.brokerXml.addressSettings.match }}
            {{- range $k, $v := . }}
             <address-setting match="{{ $k }}">
              {{- range $s, $path := $v }}
               <{{($path.parameterName)}}>{{($path.value)}}</{{ ($path.parameterName) }}>
              {{- end }}
            {{- end }}
             </address-setting>
          {{- end }}
          </address-settings>
          <addresses>
             <address name="DLQ">
                <anycast>
                   <queue name="DLQ" />
                </anycast>
             </address>
             <address name="ExpiryQueue">
                <anycast>
                   <queue name="ExpiryQueue" />
                </anycast>
             </address>
          </addresses>

        {{- if ($instance.prometheusEnabled) }}
          <metrics>
             <plugin class-name="eu.entsoe.ecp.artemis.plugin.prometheus.EcpPrometheusMetricsPlugin">
               <property key="ecpBrokerPropertiesLocation" value="{{- (($instance.brokerXml).default).ecpBrokerPropertiesLocation | default "/opt/ecp-broker/config/broker.properties" }}" />
             </plugin>
          </metrics>
        {{- end }}

          <broker-plugins>
             <broker-plugin class-name="eu.entsoe.ecp.artemis.plugin.auth.EcpBasePlugin">
                <property key="ecpBrokerPropertiesLocation" value="{{- (($instance.brokerXml).default).ecpBrokerPropertiesLocation | default "/opt/ecp-broker/config/broker.properties" }}" />
                <property key="ecpBrokerBeanConfigLocation" value="{{- (($instance.brokerXml).default).beanConfigLocation | default "/opt/ecp-broker/broker/etc/ecp-config.xml" }}" />
                <property key="ecpComponentType" value="{{- (($instance.brokerXml).default).componentType | default "ECP Broker" }}" />
                {{- if (($instance.brokerXml).default).dlq }}
                <property key="dlq" value="{{ (($instance.brokerXml).default).dlq }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).ecpCacheDisabled }}
                <property key="ecpCacheDisabled" value="{{ (($instance.brokerXml).default).ecpCacheDisabled }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).ecpCacheReloadInterval }}
                <property key="ecpCacheReloadInterval" value="{{ (($instance.brokerXml).default).ecpCacheReloadInterval }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).clusterUser }}
                <property key="clusterUser" value="{{ (($instance.brokerXml).default).clusterUser }}" />
                {{- end }}
             </broker-plugin>
          </broker-plugins>
       </core>
    </configuration>
  broker-slave.xml: |-
    <?xml version='1.0'?>
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <configuration xmlns="urn:activemq"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xi="http://www.w3.org/2001/XInclude"
                   xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

       <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq:core ">

          <name>{{- (($instance.brokerXml).default).artemisName | default (printf "%s-%s" "ECP Broker" $instance.name )}}</name>

          <persistence-enabled>{{- (($instance.brokerXml).journal).persistenceEnabled | default true }}</persistence-enabled>

          <!-- It is recommended to keep this value as 1, maximizing the number of records stored about redeliveries.
               However if you must preserve state of individual redeliveries, you may increase this value or set it to -1 (infinite). -->
          <max-redelivery-records>{{- (($instance.brokerXml).journal).maxRedeliveryRecords | default 1 }}</max-redelivery-records>

          <!-- this could be ASYNCIO, MAPPED, NIO-->
          <journal-type>{{- (($instance.brokerXml).journal).type | default "ASYNCIO" }}</journal-type>

          <!-- HA - For HA setup these directories need to point to the same storage between all the nodes -->
          <paging-directory>{{- (($instance.brokerXml).journal).pagingDirectory | default "data/paging" }}</paging-directory>
          <bindings-directory>{{- (($instance.brokerXml).journal).bindingsDirectory | default "data/bindings" }}</bindings-directory>
          <journal-directory>{{- (($instance.brokerXml).journal).journalDirectory | default "data/journal" }}</journal-directory>
          <large-messages-directory>{{- (($instance.brokerXml).journal).largeMessagesDirectory | default "data/large-messages" }}</large-messages-directory>

          <journal-datasync>{{- (($instance.brokerXml).journal).dataSync | default true }}</journal-datasync>
          <journal-min-files>{{- (($instance.brokerXml).journal).minFiles | default 2 }}</journal-min-files>
          <journal-pool-files>{{- (($instance.brokerXml).journal).poolFiles | default 10 }}</journal-pool-files>
          <journal-device-block-size>{{- (($instance.brokerXml).journal).deviceBlockSize | default 4096 }}</journal-device-block-size>
          <journal-file-size>{{- (($instance.brokerXml).journal).fileSize | default "10M" }}</journal-file-size>

          <!--
           This value was determined through a calculation.
           Your system could perform 50 writes per millisecond
           on the current journal configuration.
           That translates as a sync write every 20000 nanoseconds.

           Note: If you specify 0 the system will perform writes directly to the disk.
                 We recommend this to be 0 if you are using journalType=MAPPED and journal-datasync=false.
          -->
          <journal-buffer-timeout>{{- (($instance.brokerXml).journal).bufferTimeout | default 20000 }}</journal-buffer-timeout>

          <!-- When using ASYNCIO, this will determine the writing queue depth for libaio.-->
          <journal-max-io>{{- (($instance.brokerXml).journal).maxIO | default 4096 }}</journal-max-io>
          <!-- HA Connectors used to be announced through cluster connections and notifications -->
          <connectors>
            <connector name="MASTER">tcp://MASTER.{{$.Release.Namespace}}-{{ $.Chart.Name }}-{{$instance.name}}-headless-svc.{{$.Release.Namespace}}.svc.cluster.local:{{- ((($instance.brokerXml).highAvailability).acceptor).port | default 61616 }}</connector>
          {{- range untilStep 1 (int $instance.replicaCount) 1 }}
            <connector name="SLAVE{{ . }}">tcp://SLAVE{{ . }}.{{$.Release.Namespace}}-{{ $.Chart.Name }}-{{$instance.name}}-headless-svc.{{$.Release.Namespace}}.svc.cluster.local:{{- ((($instance.brokerXml).highAvailability).acceptor).port | default 61616 }}</connector>
          {{- end }}
            </connectors>

          <!-- how often we are looking for how many bytes are being used on the disk in ms -->
          <disk-scan-period>{{- (($instance.brokerXml).default).diskScanPeriod | default 5000 }}</disk-scan-period>

          <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
               that won't support flow control. -->
          <max-disk-usage>{{- (($instance.brokerXml).default).diskMaxUsage | default 90 }}</max-disk-usage>

          <!-- should the broker detect dead locks and other issues -->
          <critical-analyzer>{{- (($instance.brokerXml).criticalAnalyzer).enabled | default true }}</critical-analyzer>
          <critical-analyzer-timeout>{{- (($instance.brokerXml).criticalAnalyzer).timeout | default 120000 }}</critical-analyzer-timeout>
          <critical-analyzer-check-period>{{- (($instance.brokerXml).criticalAnalyzer).checkPeriod | default 60000 }}</critical-analyzer-check-period>
          <critical-analyzer-policy>{{- (($instance.brokerXml).criticalAnalyzer).policy | default "HALT" }}</critical-analyzer-policy>

          <page-sync-timeout>{{- (($instance.brokerXml).default).pageSyncTimeout | default 84000 }}</page-sync-timeout>

          <!-- how often (in ms) to check the configuration file for modifications -->
          <configuration-file-refresh-period>{{- (($instance.brokerXml).default).configurationFileRefreshPeriod | default -1 }}</configuration-file-refresh-period>

          <!-- the system will enter into page mode once you hit this limit. This is an estimate in bytes of how much the messages are using in memory
          The system will use half of the available memory (-Xmx) by default for the global-max-size.
          You may specify a different value here if you need to customize it to your needs.-->
          <global-max-size>{{- (($instance.brokerXml).default).globalMaxSize | default "800M" }}</global-max-size>

          <!-- the maximum number of messages accepted before entering full address mode.
               if global-max-size is specified the full address mode will be specified by whatever hits it first. -->
          <global-max-messages>{{- (($instance.brokerXml).default).globalMaxMessages | default -1 }}</global-max-messages>

          <acceptors>
             <!-- AMQPS Acceptor -->
             <acceptor name="amqps-broker">
                tcp://{{- (($instance.brokerXml).acceptor).ip | default "0.0.0.0" }}:{{- (($instance.brokerXml).acceptor).port | default 5671 }}?sslEnabled={{- (($instance.brokerXml).acceptor).sslEnabled | default true }};needClientAuth={{- (($instance.brokerXml).acceptor).needClientAuth | default true }};keyStorePath={{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }};keyStorePassword={{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }};trustStorePath={{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }};trustStorePassword={{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }};protocols={{- (($instance.brokerXml).acceptor).protocols | default "AMQP" }};enabledProtocols={{- (($instance.brokerXml).acceptor).enabledProtocols | default "TLSv1.3" }};transport.enabledCipherSuites={{- (($instance.brokerXml).acceptor).enabledCipherSuites | default "TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256" }}{{- if (($instance.brokerXml).acceptor).properties}}{{- range $j, $item := (($instance.brokerXml).acceptor).properties }};{{- .parameterName }}={{- .value }}{{- end }}{{- end}}
             </acceptor>
             <!-- HA - Acceptor for the cluster communication in HA setup -->
             <acceptor name="artemis">tcp://{{- ((($instance.brokerXml).highAvailability).acceptor).ip | default "0.0.0.0" }}:{{- ((($instance.brokerXml).highAvailability).acceptor).port | default 61616 }}?tcpSendBufferSize={{- ((($instance.brokerXml).highAvailability).acceptor).tcpSendBufferSize | default 1048576 }};tcpReceiveBufferSize={{- ((($instance.brokerXml).highAvailability).acceptor).tcpReceiveBufferSize | default 1048576 }};protocols={{- ((($instance.brokerXml).highAvailability).acceptor).protocols | default "CORE" }};useEpoll={{- ((($instance.brokerXml).highAvailability).acceptor).useEpoll | default true }}{{- if ((($instance.brokerXml).highAvailability).acceptor).properties }}{{- range $j, $item := ((($instance.brokerXml).highAvailability).acceptor).properties }};{{- .parameterName }}={{- .value }}{{- end }}{{- end}}</acceptor>
          </acceptors>
          <!-- HA - Cluster connection and policy settings -->
                <cluster-user>{{- (($instance.brokerXml).highAvailability).user | default "broker-ha" }}</cluster-user>
                <cluster-password>{{- (($instance.brokerXml).highAvailability).password | default "Uu:dz9bkmw+45?TqMd?f" }}</cluster-password>
                <cluster-connections>
                  <cluster-connection name="{{- (($instance.brokerXml).highAvailability).connectionName | default "ha-cluster" }}">
                    <connector-ref>SLAVE-REF</connector-ref>
                      <static-connectors>
                        <connector-ref>MASTER</connector-ref>
                      </static-connectors>
                  </cluster-connection>
                </cluster-connections>
                <ha-policy>
                  <shared-store>
                    <slave>
                      <failover-on-shutdown>true</failover-on-shutdown>
                      <allow-failback>true</allow-failback>
                    </slave>
                  </shared-store>
                </ha-policy>
          <security-settings>
             <security-setting match="#">
                <permission type="createNonDurableQueue" roles="amq"/>
                <permission type="deleteNonDurableQueue" roles="amq"/>
                <permission type="createDurableQueue" roles="amq"/>
                <permission type="deleteDurableQueue" roles="amq"/>
                <permission type="createAddress" roles="amq"/>
                <permission type="deleteAddress" roles="amq"/>
                <permission type="consume" roles="amq"/>
                <permission type="browse" roles="amq"/>
                <permission type="send" roles="amq"/>
                <!-- we need this otherwise ./artemis data imp wouldn't work -->
                <permission type="manage" roles="amq"/>
             </security-setting>
          </security-settings>

          <address-settings>
          {{- if (($instance.brokerXml).addressSettings).defaultConfigurationEnabled }}
             <!--default for catch all-->
             <address-setting match="#">
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- if max-size-bytes and max-size-messages were both enabled, the system will enter into paging
                     based on the first attribute to hits the maximum value -->
                <max-size-bytes>100M</max-size-bytes>

                <!-- limit for the address in messages, -1 means unlimited -->
                <max-size-messages>-1</max-size-messages>

                <!-- the size of each file on paging. Notice we keep files in memory while they are in use.
                     Lower this setting if you have too many queues in memory. -->
                <page-size-bytes>10M</page-size-bytes>

                <!-- limit how much memory is read from paging into the Queue. -->
                <max-read-page-bytes>20M</max-read-page-bytes>

                <message-counter-history-day-limit>-1</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-delete-queues>false</auto-delete-queues>
                <auto-delete-addresses>false</auto-delete-addresses>
             </address-setting>
             {{- end}}
          {{- range $_, $item := $instance.brokerXml.addressSettings.match }}
            {{- range $k, $v := . }}
             <address-setting match="{{ $k }}">
              {{- range $s, $path := $v }}
               <{{($path.parameterName)}}>{{($path.value)}}</{{ ($path.parameterName) }}>
              {{- end }}
            {{- end }}
             </address-setting>
          {{- end }}
          </address-settings>
          <addresses>
             <address name="DLQ">
                <anycast>
                   <queue name="DLQ" />
                </anycast>
             </address>
             <address name="ExpiryQueue">
                <anycast>
                   <queue name="ExpiryQueue" />
                </anycast>
             </address>
          </addresses>

        {{- if ($instance.prometheusEnabled) }}
          <metrics>
             <plugin class-name="eu.entsoe.ecp.artemis.plugin.prometheus.EcpPrometheusMetricsPlugin">
               <property key="ecpBrokerPropertiesLocation" value="{{- (($instance.brokerXml).default).ecpBrokerPropertiesLocation | default "/opt/ecp-broker/config/broker.properties" }}" />
             </plugin>
          </metrics>
        {{- end }}

          <broker-plugins>
             <broker-plugin class-name="eu.entsoe.ecp.artemis.plugin.auth.EcpBasePlugin">
                <property key="ecpBrokerPropertiesLocation" value="{{- (($instance.brokerXml).default).ecpBrokerPropertiesLocation | default "/opt/ecp-broker/config/broker.properties" }}" />
                <property key="ecpBrokerBeanConfigLocation" value="{{- (($instance.brokerXml).default).beanConfigLocation | default "/opt/ecp-broker/broker/etc/ecp-config.xml" }}" />
                <property key="ecpComponentType" value="{{- (($instance.brokerXml).default).componentType | default "ECP Broker" }}" />
                {{- if (($instance.brokerXml).default).dlq }}
                <property key="dlq" value="{{ (($instance.brokerXml).default).dlq }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).ecpCacheDisabled }}
                <property key="ecpCacheDisabled" value="{{ (($instance.brokerXml).default).ecpCacheDisabled }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).ecpCacheReloadInterval }}
                <property key="ecpCacheReloadInterval" value="{{ (($instance.brokerXml).default).ecpCacheReloadInterval }}" />
                {{- end }}
                {{- if (($instance.brokerXml).default).clusterUser }}
                <property key="clusterUser" value="{{ (($instance.brokerXml).default).clusterUser }}" />
                {{- end }}
             </broker-plugin>
          </broker-plugins>

       </core>
    </configuration>

  configure-cluster.sh: |
    ## Script designed to finish the broker.xml templates for Master/Slave HA. Replica with hostname ending with 0, will
    ## always be considered a master. Other replicas are marked as slaves. The pod names are loaded to the broker-master.xml
    ## and broker-slave.xml files and used for configuration.
    REPLICA_COUNT={{- (int $instance.replicaCount) }}
    set -e
    cp /tmp/broker-master.xml /tmp/broker-master.xml.tmp
    cp /tmp/broker-slave.xml /tmp/broker-slave.xml.tmp
    echo Starting decision between MASTER/SLAVE nodes for Artemis HA config.
    echo Number of nodes in the Artemis cluster: $REPLICA_COUNT
    POD_NUMBER=$(hostname | sed 's/.*-//')
    if [[ $POD_NUMBER -eq 0 ]] ; then
      echo "This pod has value: $POD_NUMBER in hostname, thus is considered as a Master."
      MASTER_POD_NAME=$(hostname)
      echo "Hostname of Master pod is: $MASTER_POD_NAME".
      echo "Replacing the Master name in the broker-master.xml file."
      sed -i "s/MASTER/$MASTER_POD_NAME/g" /tmp/broker-master.xml.tmp
      echo "Replacing the Slave names in the broker-master.xml file."
      SLAVE_POD_NAME=$(echo $(hostname) | sed 's/.$//')
      for i in $(seq $REPLICA_COUNT)
        do
          sed -i "s/SLAVE$i/$SLAVE_POD_NAME$i/g" /tmp/broker-master.xml.tmp
        done
      echo "Configuration has been finished, copying file: /tmp/broker-master.xml.tmp to the: /opt/ecp-broker/broker/etc/broker.xml path."
      cp /tmp/broker-master.xml.tmp /opt/ecp-broker/broker/etc/broker.xml
    else
      echo "This pod has value: $POD_NUMBER in hostname, thus is considered as a Slave."
      SLAVE_POD_NAME=$(hostname)
      echo "Hostname of Slave pod is: $SLAVE_POD_NAME".
      echo "Replacing the Slave name in the broker.xml file."
      sed -i "s/SLAVE-REF/$SLAVE_POD_NAME/g" /tmp/broker-slave.xml.tmp
      SLAVE_POD_NAME=$(echo $(hostname) | sed 's/.$//')
      for i in $(seq $REPLICA_COUNT)
        do
          echo $i ,$SLAVE_POD_NAME$i, SLAVE$i
          sed -i "s/SLAVE$i/$SLAVE_POD_NAME$i/g" /tmp/broker-slave.xml.tmp
        done
      echo "Replacing the Master names in the broker.xml file."
      MASTER_POD_NAME=$(echo $(hostname) | sed 's/.$//')0
      sed -i "s/MASTER/$MASTER_POD_NAME/g" /tmp/broker-slave.xml.tmp
      echo "Configuration has been finished, copying file: /tmp/broker-slave.xml.tmp to the: /opt/ecp-broker/broker/etc/broker.xml path."
      cp /tmp/broker-slave.xml.tmp /opt/ecp-broker/broker/etc/broker.xml
    fi

  artemis-users.properties: |-
    ## ---------------------------------------------------------------------------
    ## Licensed to the Apache Software Foundation (ASF) under one or more
    ## contributor license agreements.  See the NOTICE file distributed with
    ## this work for additional information regarding copyright ownership.
    ## The ASF licenses this file to You under the Apache License, Version 2.0
    ## (the "License"); you may not use this file except in compliance with
    ## the License.  You may obtain a copy of the License at
    ##
    ## http://www.apache.org/licenses/LICENSE-2.0
    ##
    ## Unless required by applicable law or agreed to in writing, software
    ## distributed under the License is distributed on an "AS IS" BASIS,
    ## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    ## See the License for the specific language governing permissions and
    ## limitations under the License.
    ## ---------------------------------------------------------------------------
    {{- if ($instance.artemisUsers) }}
      {{- range $j, $item := ($instance.artemisUsers) }}
      {{ $item.login }}={{ $item.password }}
    {{- end }}
    {{ else }}
      {{($instance.ecpProperties).artemisDefaultUser | default "admin" }}={{ ($instance.ecpProperties).artemisDefaultPassword | default "PnXsKwz5md0bFBg0CV2jLa4q" }}{{- end }}

  artemis-roles.properties: |-
    ## ---------------------------------------------------------------------------
    ## Licensed to the Apache Software Foundation (ASF) under one or more
    ## contributor license agreements.  See the NOTICE file distributed with
    ## this work for additional information regarding copyright ownership.
    ## The ASF licenses this file to You under the Apache License, Version 2.0
    ## (the "License"); you may not use this file except in compliance with
    ## the License.  You may obtain a copy of the License at
    ##
    ## http://www.apache.org/licenses/LICENSE-2.0
    ##
    ## Unless required by applicable law or agreed to in writing, software
    ## distributed under the License is distributed on an "AS IS" BASIS,
    ## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    ## See the License for the specific language governing permissions and
    ## limitations under the License.
    ## ---------------------------------------------------------------------------

    {{- if ($instance.artemisUsers) }}
        {{- $logins := list }}
        {{- range $i, $item := $instance.artemisUsers }}
        {{- $logins = append $logins (printf "%s" $item.login) }}
        {{- end }}
    amq: {{ join "," $logins }}
    {{ else }}
      {{ ($instance.ecpProperties).artemisDefaultRole | default "amq" }}={{($instance.ecpProperties).artemisDefaultUser | default "admin" }}{{- end }}
  
  bootstrap.xml: |-
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <!--
      ~ Licensed to the Apache Software Foundation (ASF) under one or more
      ~ contributor license agreements. See the NOTICE file distributed with
      ~ this work for additional information regarding copyright ownership.
      ~ The ASF licenses this file to You under the Apache License, Version 2.0
      ~ (the "License"); you may not use this file except in compliance with
      ~ the License. You may obtain a copy of the License at
      ~
      ~     http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~ Unless required by applicable law or agreed to in writing, software
      ~ distributed under the License is distributed on an "AS IS" BASIS,
      ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~ See the License for the specific language governing permissions and
      ~ limitations under the License.
      -->

    <broker xmlns="http://activemq.apache.org/schema">

        <security-manager class-name="eu.entsoe.ecp.artemis.plugin.auth.EcpAuthorizationPlugin">
            <property key="ecpBrokerPropertiesLocation" value="{{- (($instance.brokerXml).default).ecpBrokerPropertiesLocation | default "/opt/ecp-broker/config/broker.properties" }}" />
            {{- if (($instance.brokerXml).default).ecpCacheDisabled }}
            <property key="ecpCacheDisabled" value="{{ (($instance.brokerXml).default).ecpCacheDisabled }}" />
            {{- end }}
            {{- if (($instance.brokerXml).default).ecpCacheReloadInterval }}
            <property key="ecpCacheReloadInterval" value="{{ (($instance.brokerXml).default).ecpCacheReloadInterval }}" />
            {{- end }}
            {{- if (($instance.brokerXml).default).clusterUser }}
            <property key="clusterUser" value="{{ (($instance.brokerXml).default).clusterUser }}" />
            {{- end }}
            {{- if (($instance.brokerXml).default).clusterPassword }}
            <property key="clusterPassword" value="{{ (($instance.brokerXml).default).clusterPassword }}" />
            {{- end }}
            {{- if (($instance.brokerXml).default).passwordCodec }}
            <property key="passwordCodec" value="{{ (($instance.brokerXml).default).passwordCodec }}" />
            {{- end }}
        </security-manager>

        <!-- artemis.URI.instance is parsed from artemis.instance by the CLI startup.
             This is to avoid situations where you could have spaces or special characters on this URI -->
        <server configuration="file:/opt/ecp-broker/broker/etc/broker.xml"/>

        <!-- The web server is only bound to localhost by default -->
        <web path="web" rootRedirectLocation="console">
      {{- if (($instance.service).https).port }}
        <binding name="artemis" uri="https://{{ (($instance.service).https).host | default "0.0.0.0" }}:{{ (($instance.service).https).port | default "8162" }}" keyStorePath="{{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }}" keyStorePassword="{{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }}" trustStorePath="{{- ($instance.brokerProperties).ecpAuthKeystoreLocation | default "/opt/ecp-broker/config/authKeystore.jks" }}" trustStorePassword="{{- ($instance.brokerProperties).ecpAuthKeystorePassword | default "password" }}" sniHostCheck="false">
      {{ else }}
        <binding name="artemis" uri="http://{{ (($instance.service).http).host | default "0.0.0.0" }}:{{ (($instance.service).http).port | default "8161" }}">
      {{- end }}
          <app name="branding" url="activemq-branding" war="activemq-branding.war"/>
          <app name="plugin" url="artemis-plugin" war="artemis-plugin.war"/>
          <app name="console" url="console" war="console.war"/>
      {{- if ($instance.prometheusEnabled) }}
          <app url="metrics" war="metrics.war"/>
      {{- end }}
            </binding>
        </web>

    </broker>

  jolokia-access.xml: |-
    <?xml version="1.0" encoding="utf-8"?>
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <!-- This policy file controls the Jolokia JMX-HTTP bridge security options for the web console.
       see: https://jolokia.org/reference/html/security.html -->
    <restrict>

        <cors>
            <!-- Allow cross-origin access from the origins that match the following pattern ... -->
            <allow-origin>*://{{ (($instance.service).https).host | default (($instance.service).http).host | default "" }}*</allow-origin>

            <!-- Options from this point on are auto-generated by Create.java from the Artemis CLI -->
            <!-- Check for the proper origin on the server side, too -->
            <strict-checking/>
        </cors>

    </restrict>

  log4j2.properties: |-
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # Log4J 2 configuration

    # Monitor config file every X seconds for updates
    monitorInterval = 5

    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = console
    rootLogger.appenderRef.log_file.ref = log_file

    #ECCoSP logging
    logger.eu_entsoe.name=eu.entsoe
    logger.eu_entsoe.level=INFO

    logger.activemq.name=org.apache.activemq
    logger.activemq.level=INFO

    logger.artemis_server.name=org.apache.activemq.artemis.core.server
    logger.artemis_server.level=INFO

    logger.artemis_journal.name=org.apache.activemq.artemis.journal
    logger.artemis_journal.level=INFO

    logger.artemis_utils.name=org.apache.activemq.artemis.utils
    logger.artemis_utils.level=INFO

    # CriticalAnalyzer: If you have issues with the CriticalAnalyzer, setting this to TRACE would give
    # you extra troubleshooting info, but do not use TRACE regularly as it would incur extra CPU usage.
    logger.critical_analyzer.name=org.apache.activemq.artemis.utils.critical
    logger.critical_analyzer.level=INFO

    #ECCoSP Audit logging
    logger.ecp_audit_logs.name = EcpAuditLog
    logger.ecp_audit_logs.level = ALL
    logger.ecp_audit_logs.appenderRef.audit_log_file.ref = audit_log_file
    logger.ecp_audit_logs.additivity = false

    # Audit loggers: to enable change levels from OFF to INFO
    logger.audit_base.name = org.apache.activemq.audit.base
    logger.audit_base.level = OFF
    logger.audit_base.appenderRef.audit_log_file.ref = audit_log_file
    logger.audit_base.additivity = false

    logger.audit_resource.name = org.apache.activemq.audit.resource
    logger.audit_resource.level = OFF
    logger.audit_resource.appenderRef.audit_log_file.ref = audit_log_file
    logger.audit_resource.additivity = false

    logger.audit_message.name = org.apache.activemq.audit.message
    logger.audit_message.level = OFF
    logger.audit_message.appenderRef.audit_log_file.ref = audit_log_file
    logger.audit_message.additivity = false

    # Jetty logger levels
    logger.jetty.name=org.eclipse.jetty
    logger.jetty.level=WARN

    # web console authenticator too verbose for impatient client
    logger.authentication_filter.name=io.hawt.web.auth.AuthenticationFilter
    logger.authentication_filter.level=ERROR

    # Quorum related logger levels
    logger.curator.name=org.apache.curator
    logger.curator.level=WARN
    logger.zookeeper.name=org.apache.zookeeper
    logger.zookeeper.level=ERROR


    # Console appender
    appender.console.type=Console
    appender.console.name=console
    appender.console.layout.type=PatternLayout
    appender.console.layout.pattern=%d %-5level [%logger] %msg%n

    # Log file appender
    appender.log_file.type = RollingFile
    appender.log_file.name = log_file
    appender.log_file.fileName = ${sys:artemis.instance}/log/artemis.log
    appender.log_file.filePattern = ${sys:artemis.instance}/log/artemis.%d{yyyy-MM-dd}.log.gz
    appender.log_file.layout.type = PatternLayout
    appender.log_file.layout.pattern = %d %-5level [%logger] %msg%n
    appender.log_file.policies.type = Policies
    appender.log_file.policies.size.type = SizeBasedTriggeringPolicy
    appender.log_file.policies.size.size = 10MB
    appender.log_file.strategy.type = DefaultRolloverStrategy
    appender.log_file.strategy.max = 10

    # Audit log file appender
    appender.audit_log_file.type = RollingFile
    appender.audit_log_file.name = audit_log_file
    appender.audit_log_file.fileName = ${sys:artemis.instance}/log/audit.log
    appender.audit_log_file.filePattern = ${sys:artemis.instance}/log/audit.%d{yyyy-MM-dd}.log.gz
    appender.audit_log_file.layout.type = PatternLayout
    appender.audit_log_file.layout.pattern = %d [AUDIT](%t) %msg%n
    appender.audit_log_file.policies.type = Policies
    appender.audit_log_file.policies.size.type = SizeBasedTriggeringPolicy
    appender.audit_log_file.policies.size.size = 10MB
    appender.audit_log_file.strategy.type = DefaultRolloverStrategy
    appender.audit_log_file.strategy.max = 10

  {{ range $i, $item := $instance.configMap }}
  {{ .subPath }}: |-
  {{- .content | nindent 4 }}
  {{ end }}
---
{{- end }}
{{ end }}